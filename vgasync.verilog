module vgasync(input CLOCK_50, input [29:29] GPIO_1, output [0:0] VGA_VS, output [0:0] VGA_HS, output [3:0] VGA_R, output [3:0] VGA_G, output [3:0] VGA_B);

	wire clk;
	wire reset; assign reset = 1;
	wire vsync = GPIO_1[29];
	wire phasecounterselect_sig;
	wire phasestep_sig;
	wire phasedone_sig;

//	qsyssystem(reset, CLOCK_50, clk);
	vga_frame(clk, vsync, VGA_VS[0:0], VGA_HS[0:0], VGA_R[3:0], VGA_G[3:0], VGA_B[3:0], phasestep_sig, phasedone_sig);
	altpllwdp	altpllwdp_inst (
	.inclk0 ( CLOCK_50 ),
	.phasecounterselect (0), //clock 0 <- phasecounterselect_sig
	.phasestep ( phasestep_sig ),
	.phaseupdown ( 1 ),
	.scanclk ( clk ),
	.c0 ( clk ),
	.phasedone ( phasedone_sig )
	);



endmodule

module vga_frame
	( input clk
	, input vsync
	, output reg [0:0] VGA_VS , output reg [0:0] VGA_HS
	, output reg [3:0] VGA_R  , output reg [3:0] VGA_G    , output reg [3:0] VGA_B
	, output reg phasestep_sig
	, input phasedone_sig);
// http://www.epanorama.net/faq/vga2rgb/calc.html
//	parameter PIXEL_CLK  =   25170; // Set to 25.200 MHz to match VGA output (xrandr cable unplugged)
//	parameter H_DISP   	=   640;
//	parameter H_FPORCH   =   16;
//	parameter H_SYNC   	=   96;
//	parameter H_BPORCH   =   48;
//	parameter H_SYNC_POL =   0;
//	parameter V_DISP   	=   480;
//	parameter V_FPORCH   =   11;
//	parameter V_SYNC   	=   2;
//	parameter V_BPORCH   =   31;
//	parameter V_SYNC_POL =   0;
	
	parameter PIXEL_CLK   =   31500;
	parameter H_DISP   	 =   640;
	parameter H_FPORCH    =   16;
	parameter H_SYNC      =   96;
	parameter H_BPORCH    =   48;
	parameter H_SYNC_POL  =   0;
	parameter V_DISP      =   480;
	parameter V_FPORCH    =   11;
	parameter V_SYNC      =   2;
	parameter V_BPORCH    =   32;
	parameter V_SYNC_POL  =   0;


	parameter line_per_frame  = V_FPORCH+V_SYNC+V_BPORCH+V_DISP; // Lines per Frame
	parameter pixel_per_line  = H_FPORCH+H_SYNC+H_BPORCH+H_DISP; // Pixels per Line
	parameter clock_per_pixel = 1; // round(clock_freq/pixel_rate);
	parameter pixel_per_frame = line_per_frame*pixel_per_line; // Pixels
	parameter white = 4'b1111;
	parameter black = 4'b0000;
	parameter window = 10;
	parameter PHASEHUNTGAIN = 1;

	reg [23:0] clock_num = 0;
	reg [23:0] pixel_num = 0;
	reg [23:0] line_num  = 0;
	reg [3:0] bw = white;
	reg invsync = 0;

	reg [0:0] f = 0;
	initial begin
		VGA_VS[0] = ~V_SYNC_POL;
	end
	
	reg [31:0] phasectr    = 0;
	reg [31:0] phaseperiod = 200;
	

	always @(posedge clk)// or posedge hsync)
	begin	
		
		if(vsync) // On vsync
		begin
			if (invsync == 0) begin
				// Jump if too far away
				if (  line_num < V_FPORCH - window
					|| line_num > V_FPORCH + window
					)  begin
					clock_num = 0;
					pixel_num = 0;
					line_num  = V_FPORCH;
				end
				else 
				if (line_num <  V_FPORCH) begin
					// add phase quicker
					phaseperiod = phaseperiod + PHASEHUNTGAIN;
				end else begin
				   // add phase slower
					if (phaseperiod > PHASEHUNTGAIN)
						phaseperiod = phaseperiod - PHASEHUNTGAIN;
				end
				invsync = 1;	
			end	
		end else
			invsync = 0;
		
		
		phasectr = phasectr + 1;
		if (phasectr >= phaseperiod) begin
			phasectr = 0;
			phasestep_sig <= 1;
		end else if (phasectr > 2)
			phasestep_sig <= 0;
		
		
		if (clk)
		begin
			// VSync Pulse
			if (  line_num >= V_FPORCH
			   && line_num <  V_FPORCH+V_SYNC
			)
				VGA_VS[0] <= V_SYNC_POL;
			else
				VGA_VS[0] <=~V_SYNC_POL;


			// HSync Pulse
			if (  pixel_num >= H_FPORCH
			   && pixel_num <  H_FPORCH+H_SYNC
			)
				VGA_HS[0] <= H_SYNC_POL;
			else
				VGA_HS[0] <=~H_SYNC_POL;
				
			// VH Visible area	
			if (  line_num  >= V_FPORCH+V_SYNC+V_BPORCH
				&& pixel_num >= H_FPORCH+H_SYNC+H_BPORCH
				&& line_num  <  V_FPORCH+V_SYNC+V_BPORCH+V_DISP
				&& pixel_num <  H_FPORCH+H_SYNC+H_BPORCH+H_DISP
			)
			begin
				VGA_R[3:0] <= bw[3:0];
				VGA_G[3:0] <= bw[3:0]; 
				VGA_B[3:0] <= bw[3:0];
			end 
			else
			begin
				VGA_R[3:0] <= black;
				VGA_G[3:0] <= black; 
				VGA_B[3:0] <= black;
			end

			clock_num = clock_num + 1;
			if (clock_num == clock_per_pixel) begin 
				clock_num = 0;
				pixel_num = pixel_num+1;
				if (pixel_num == pixel_per_line) begin
					pixel_num = 0;
					line_num  = line_num+1;
					if (line_num == line_per_frame) begin
						line_num = 0;
						bw[3:0] = ~bw[3:0];
					end
				end
			end 

		end
	end
endmodule
